// functions/src/index.ts
import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import cors from 'cors'; // Corrected: This is now a default import

admin.initializeApp();
const db = admin.firestore();

// CORS handler for HTTP functions
const corsHandler = cors({ origin: true }); // Allows all origins; restrict for production

// callable function to get a secret (using runtime config for v1 compatibility)
// For actual secrets, consider Firebase Secret Manager (v2 functions)
export const getSecretConfig = functions.https.onCall(async (data, context) => {
  // Ensure the user is authenticated
  if (!context.auth) {
    throw new functions.https.HttpsError(
      'unauthenticated',
      'The function must be called while authenticated.'
    );
  }

  const userId = context.auth.uid;

  // Example: Retrieve a "secret" from runtime config
  // Ensure you've set this via `firebase functions:config:set secrets.my_secret_key="your_secret_value"`
  const mySecretValue = functions.config().secrets?.my_secret_key;

  return { message: `Secret retrieved for user ${userId}`, secret: mySecretValue };
});


// callable function to set a user's custom claim (e.g., admin role)
export const setUserRole = functions.https.onCall(async (data, context) => {
  // Check if the user is authenticated and is an admin
  if (!context.auth || !context.auth.token || !context.auth.token.admin) {
    throw new functions.https.HttpsError(
      'permission-denied',
      'User must be an administrator to set roles.'
    );
  }

  const targetUserId = data.targetUserId;
  const roleToAssign = data.role;

  if (!targetUserId || typeof roleToAssign !== 'string') {
    throw new functions.https.HttpsError(
      'invalid-argument',
      'The function must be called with a targetUserId and a role (string).'
    );
  }

  try {
    await admin.auth().setCustomUserClaims(targetUserId, { [roleToAssign]: true });

    // Optionally update Firestore to reflect the role
    await db.collection('users').doc(targetUserId).set({
      roles: {
        [roleToAssign]: true
      },
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    }, { merge: true });

    return { message: `Custom claim '${roleToAssign}' set for user ${targetUserId}` };
  } catch (error) {
    console.error("Error setting custom claim:", error);
    throw new functions.https.HttpsError('internal', 'Unable to set user role.');
  }
});

// Firestore trigger example (v1 syntax) - to react to new user creations
export const onUserCreate = functions.firestore
  .document('users/{userId}')
  .onCreate(async (snap, context) => {
    const newUser = snap.data();
    const userId = context.params.userId;
    console.log(`New user created: ${userId}`, newUser);

    // Example: Initialize user profile in Firestore
    await db.collection('userProfiles').doc(userId).set({
      email: newUser.email || null, // Assuming email might be part of user data
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      lastLogin: admin.firestore.FieldValue.serverTimestamp(),
      // Add other initial profile data as needed
    }, { merge: true });

    return null; // Always return null for background functions
  });

// Example HTTP function (standard HTTP request/response)
export const helloWorld = functions.https.onRequest((req, res) => {
  corsHandler(req, res, () => {
    res.status(200).send("Hello from Raptor Suite Firebase Functions!");
  });
});

// IMPORTANT: voiceMode is temporarily commented out due to TypeScript errors
// We will address its dependencies and syntax in a later phase.
// export * from './voiceMode';

// Export universalAI as it's a critical AI function
export * from './universalAI';